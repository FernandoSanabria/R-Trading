portfolioReturns %>% chartSeries(TA="addROC()",subset="2020")
tickers <- c("WALMEX.MX", "BBD", "KOF", "GFNORTEO.MX", "TV")
weights <- c(.20, .20, 0.20, 0.20, 0.20)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices, getSymbols.yahoo(ticker,
from='2019-12-12',to='2020-4-1', periodicity="daily",auto.assign=FALSE)[,6])
}
portfolioReturns <- na.omit(ROC(portfolioPrices))
portfolioReturns %>% chartSeries(TA="addROC()",subset="2020")
weights <- c(.20, .20, 0.20, 0.20, 0.20)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices, getSymbols.yahoo(ticker,
from='2019-12-12',to='2020-2-13', periodicity="daily",auto.assign=FALSE)[,6])
}
head(portfolioPrices)
#ROC: Rate of change. % de variacion entre precio actual y precio de
#periodo anterior.
portfolioReturns <- na.omit(ROC(portfolioPrices))
head(portfolioReturns)
weights <- c(.20, .20, 0.20, 0.20, 0.20)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices, getSymbols.yahoo(ticker,
from='2019-12-12',to='2020-2-13', periodicity="daily",auto.assign=FALSE)[,6])
}
head(portfolioPrices)
#ROC: Rate of change. % de variacion entre precio actual y precio de
#periodo anterior.
portfolioReturns <- na.omit(ROC(portfolioPrices))
head(portfolioReturns)
portfolioReturns %>% chartSeries(TA="addROC()",subset="2020")
benchmarkReturns %>% chartSeries(TA="addROC()",subset="2020")
benchmarkReturns2 %>% chartSeries(TA="addROC()",subset="2020")
portfolioReturns %>% chartSeries(TA="addROC()",subset="2020")
tickers <- c("WALMEX.MX", "BBD", "KOF", "GFNORTEO.MX", "TV")
weights <- c(.20, .20, 0.20, 0.20, 0.20)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices, getSymbols.yahoo(ticker,
from='2019-12-12',to='2020-1-30', periodicity="daily",auto.assign=FALSE)[,6])
}
head(portfolioPrices)
#ROC: Rate of change. % de variacion entre precio actual y precio de
#periodo anterior.
portfolioReturns <- na.omit(ROC(portfolioPrices))
head(portfolioReturns)
portfolioReturns %>% chartSeries(TA="addROC()",subset="2020")
library(PerformanceAnalytics)
library(PortfolioAnalytics)
tickers <- c("WALMEX.MX", "BBD", "KOF", "GFNORTEO.MX", "TV")
weights <- c(.20, .20, 0.20, 0.20, 0.20)
portfolioPrices <- NULL
for(ticker in tickers) {
portfolioPrices <- cbind(portfolioPrices, getSymbols.yahoo(ticker,
from='2020-1-1', periodicity="daily",auto.assign=FALSE)[,6])
}
#ROC: Rate of change. % de variacion entre precio actual y precio de
#periodo anterior.
portfolioReturns <- na.omit(ROC(portfolioPrices))
head(portfolioReturns)
portfolioReturns %>% chartSeries(TA="addROC()",subset="2020")
CAPM.beta(portfolioReturns, benchmarkReturns, .035/252)
CAPM.beta(portfolioReturns, benchmarkReturns, .035/252)
table.AnnualizedReturns(portfolioReturns)
portfolioReturns
portf <- portfolio.spec(colnames(portfolioReturns))
portf <- add.constraint(portf, type="weight_sum", min_sum=1,
max_sum=1)
portf <- add.constraint(portf, type="box", min=.10, max=.40)
portf <- add.objective(portf, type="risk", name="StdDev")
portf <- add.objective(portf, type="return", name="mean")
portf <- add.constraint(portf, type="box", min=.10, max=.40)
portf <- add.constraint(portf, type="weight_sum", min_sum=1,
max_sum=1)
?GenSA
library(GenSA)
optPort <- optimize.portfolio(portfolioReturns, portf,
optimize_method ="GenSA")
optPort
library(Quandl)
library(scales)
library(gridExtra)
library(TTR)
library(jsonlite)
library(xtable)
library(gtable)
library(grid)
library(dplyr)
install.packages('xtable')
library(Quandl)
library(scales)
library(gridExtra)
library(TTR)
library(jsonlite)
library(xtable)
library(gtable)
library(grid)
library(dplyr)
install.packages('gridExtra')
library(Quandl)
library(scales)
library(gridExtra)
library(TTR)
library(jsonlite)
library(xtable)
library(gtable)
library(grid)
library(dplyr)
install.packages('Quandl')
library(Quandl)
library(scales)
library(gridExtra)
library(TTR)
library(jsonlite)
library(xtable)
library(gtable)
library(grid)
library(dplyr)
library(tidyverse)
library(httr)
library(readxl)
library(lubridate)
library(reshape2)
library(quantmod)
Quandl.api_key("VezxJGwvuyxLx3ByLrGo")
PFL <- getSymbolsYahoo(c("KOF"))
library(quantmod)
PFL <- getSymbolsYahoo(c("KOF"))
PFL <- getSymbolsYahoo(c("KOF"))
PFL <- getSymbols.yahoo(c("KOF"))
PFL <- getSymbols("KOF")
filter(date >= "2015-01-01")
PFL <- getSymbols("KOF")
filter(date >= "2015-01-01")
PFL <- getSymbols("KOF")  %>%
filter(date >= "2015-01-01")
setwd("/home/akasha/Documents/TRADING-R-PLATZI-master")
library(dplyr)
PFL <- getSymbols("KOF")  %>%
filter(date >= "2015-01-01")
PFL <- getSymbols.yahoo("KOF")  %>%
filter(date >= "2015-01-01")
ILF <- getSymbolsYahoo("ILF") %>%
filter(date >= "2015-01-01")
as.environment()
as.environment(".GlobalEnv")
PFL <- getSymbolsYahoo(c("KOF"))
filter(date >= "2015-01-01")
getSymbols.yahoo('KOF',
from='2015-01-01')
getSymbols.yahoo('KOF',
from='2015-01-01',  periodicity='daily')
getSymbols.yahoo('KOF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]
PFL <- getSymbols.yahoo('KOF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]
ILF <- getSymbols.yahoo('KOF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]
ILF <- getSymbols.yahoo('ILF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]
ILF <- getSymbols.yahoo('ILF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]
PFL <- getSymbols.yahoo('KOF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- getSymbolsYahoo(c("KOF"))
filter(date >= "2015-01-01")
PFL <- getSymbolsYahoo(c("KOF"))  %>%
filter(date >= "2015-01-01")
PFL <- getSymbols.yahoo('KOF',
from='2015-01-01',  periodicity='daily',auto.assign=FALSE)[,6]  %>%
filter(date >= "2015-01-01")
get_data <- function(ticker, from, to = Sys.Date()) {
return(getSymbols.yahoo(ticker, from = from, to = to, auto.assign=F))
}
getSymbolsYahoo <- function(ticker,from) {
data_full <- get_data(ticker,from)
data_full <- data.frame(
"Date"=as.Date(rownames(as.data.frame(data_full))),
"Open"=as.data.frame(data_full)[,1],
"High"=as.data.frame(data_full)[,2],
"Low"=as.data.frame(data_full)[,3],
"Close"=as.data.frame(data_full)[,4],
"Volume"=as.data.frame(data_full)[,5],
"Adj.Close"=as.data.frame(data_full)[,6]
)
}
PFL <- getSymbolsYahoo(c("KOF"))  %>%
filter(date >= "2015-01-01")
PFL <- getSymbolsYahoo("KOF",'2015-01-01')  %>%
filter(date >= "2015-01-01")
ILF <- getSymbolsYahoo("ILF") %>%
filter(date >= "2015-01-01")
ILF <- getSymbolsYahoo("ILF",'2015-01-01') %>%
filter(date >= "2015-01-01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signalCondition = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(g = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
rlang::last_error()
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
library(dplyr)
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate('signal' = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(Date, "%m")) <= 9,1,-1), ticker = "M01")
PFL
PFL <- PFL %>%
mutate(daily_return = ifelse(row_number() == 1, 0, adjusted_close / lag(adjusted_close, 1) - 1),
signal_return = daily_return * signal,
#retornos acumulados
cum_return = cumprod(1 + signal_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(signal_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
PFL
PFL <- PFL %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
signal_return = daily_return * signal,
#retornos acumulados
cum_return = cumprod(1 + signal_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(signal_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
head(PFL)
ILF <- getSymbolsYahoo("ILF",'2015-01-01') %>%
filter(date >= "2015-01-01")
ILF <- ILF %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
cum_return = cumprod(1 + daily_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(daily_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
combined <- bind_rows(PFL, ILF)
ILF <- getSymbolsYahoo("ILF",'2015-01-01') %>%
filter(date >= "2015-01-01")
ILF <- ILF %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
cum_return = cumprod(1 + daily_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(daily_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
combined= NULL
combined <- bind_rows(PFL, ILF)
head(combined)
tail(combined)
(p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot())
(p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0)
p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot()
p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot()
p1 <- ggplot2(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot()
p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot()
library(knitr)
library(plyr)
p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot()
p1 <- ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0)
(p1 <- ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot())
ggplot(combined, aes(x = date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
(p1 <- ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot())
library(Quandl)
library(scales)
library(gridExtra)
library(TTR)
library(jsonlite)
library(xtable)
library(gtable)
library(grid)
library(dplyr)
# 2. Load
library(tidyverse)
library(httr)
library(readxl)
library(lubridate)
library(reshape2)
library(quantmod)
(p1 <- ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot())
ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0)
(p1 <- ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot())
(p1 <- ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme_alphaplot())
(p1 <- ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
geom_hline(yintercept = 0) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
theme_alphaplot())
library(Rcpp)
combined
ILF <- getSymbolsYahoo("ILF",'2015-01-01') %>%
filter(date >= "2015-01-01")
ILF <- ILF %>%
mutate( ticker = "ILF")
combined= NULL
combined <- bind_rows(PFL, ILF)
ggplot(combined, aes(x = Date, y = cum_return)) +
geom_line(aes(colour = ticker)) +
labs(title = "Equity Curve Versus Benchmark",
subtitle = "Evaluación de desempeno de la estrategia",
y = "Cumulative Return",
x = "Date") +
geom_hline(yintercept = 0) +
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ILF <- ILF %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
cum_return = cumprod(1 + daily_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(daily_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
ILF <- ILF %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
cum_return = cumprod(1 + daily_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(daily_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
ILF <- getSymbolsYahoo("ILF",'2015-01-01') %>%
filter(date >= "2015-01-01")
ILF <- ILF %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
cum_return = cumprod(1 + daily_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(daily_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
ILF
PFL <- getSymbolsYahoo("KOF",'2015-01-01')  %>%
filter(date >= "2015-01-01")
ILF = NULL
PFL = NULL
PFL <- getSymbolsYahoo("KOF",'2015-01-01')  %>%
filter(date >= "2015-01-01")
ILF <- getSymbolsYahoo("ILF",'2015-01-01') %>%
filter(date >= "2015-01-01")
PFL <- PFL %>%
mutate(signal = ifelse(as.numeric(format(Date, "%m")) <= 9,1,-1), ticker = "M01")
PFL <- PFL %>%
mutate(daily_return = ifelse(row_number() == 1, 0, Adj.Close / lag(Adj.Close, 1) - 1),
signal_return = daily_return * signal,
#retornos acumulados
cum_return = cumprod(1 + signal_return) - 1,
cum_return_3m = (cum_return + 1) / lag(cum_return + 1, 63) - 1,
cum_return_12m = (cum_return + 1) / lag(cum_return + 1, 252) - 1,
drawdown = (cum_return + 1) / cummax(cum_return + 1) - 1,
sd_12m = runSD(signal_return, n = 252)*sqrt(252),
sharpe_12m = SMA(cum_return_12m / sd_12m), 252)
